v1.4.0
- fixed multiple bugs around new lines, discarding whitespace and calculating
  line width, in xr::BoxText::Measure();
- fixed xr::BoxText::Generate() - removed first glyph xBearing from the cursor
  calculation as already accounted for in the Measurement;
- fixed xr::BoxText::CreateMesh() - empty measurements are safely ignored;
- fixed LogMemory() bugs:
  * removed out of bounds access;
  * all 16 bytes of the 'row' are printed in a human readable form;
- fixed AssetTests to no longer run in Release;
- improved xr::BoxText's usability:
  * improved the handling of Windows-style line breaks (CR/LF);
  * default box width is the maximum value float can represent;
  * added EnsureVerticalFit() to grow the box (if smaller) to
    n lines with given font and scale;
  * added Get/SetOrigin() to facilitate positioning the text;
  * added Get/SetHorizontal/VerticalSpacing();
  * added overloads to Measure() / CreateMesh() that take the
    number of bytes [of text] to be processed;
- added VS debug visualisers for the most commonly used types;
- updated premake to 5.0.0-alpha13 on all platforms;

v1.3.0
- fixed xr::AssetPack's handling of dependencies and aliases:
  * fixed the management of AssetPack contents - when UnmanagedFlag was set, it
    is only the AssetPack itself that isn't managed;
  * fixed redundant building and writing of contents that are also dependencies
    of other content;
  * dependencies not defined in the pack but having a dependency on content,
    are now being built into the pack;
  * the availability of internal dependencies is now ensured;
  * multiply defined assets (of the same path) are ignored with a warning;
  * multiply defined aliases override previous definitions with a warning;
- xr::CallbackBase<>::Call() is now a const method;
- deprecated xr::AssetPack::Get() in favour of the new GetAssetPtr();
- xr::Asset::Manager::Manage() only acquires the lock if the asset was valid in
  the first place;
- added xr::AssetPack::GetAsset<>();
- added xr::GameLoop;
- added xr::ReverseAdaptor<>;

v1.2.0
- fixed xr::Entity::FindComponent<>();
- fixed xr::Entity::AddComponent<>() - owner is correctly assigned;
- fixed xr::Entity::Clone() - cloning an Entity as a child to itself no longer
  causes infinite recursion, and the owner of cloned Components is now correctly
  assigned;
- fixed xr::StateManager::Pop/Change(), where the current state is now Exit()ed
  first and only Shutdown() once;
- fixed inconsistencies in the uses of int types in the Gfx API;
- added multi-threaded Gfx implementation;
- added support for PointList Primitives in Gfx;

v1.1.2
- fixed a broken include in Singleton.hpp;
- deprecated the option to transfer ownership of a texture via
  GFx::CreateFrameBuffer();
- improved error logging from ShaderComponent and Shader;
- added Singleton::Instance() and deprecated GetInst();
- added C++14-standard deprecation markers to previously deprecated APIs;
- changed InputImpl to a Singleton;

v1.1.1
- GCC v5.4 compilation errors fixed; 

v1.1

- fixed macOS build configuration and Clang compilation / link errors;
- fixed GLSL syntax that would not fly on macOS;
- fixed Entity/Component implementation (and AddComponent());
- added xr::FixedStreamBuf to xr3core;
- added xr::Config to replace Device::GetConfig{|Int}() and changed
  implementation to use environment variables;
- added Linux (64-bits) as a supported platform;

v1.0

- Initial release.
