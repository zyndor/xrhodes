v1.6.1
- fixed xr::Gfx active resource caching: when a texture / framebuffer / shader
  program is released and it's found to be active, it's invalidated (and in case
  of frame buffers, the currently active one - if different -, is bound again).
  Textures and frame buffers also will no longer be accidentally active after
  their creation;
- fixed xr::Transforms: the near / far / tangent of half vertical FOV values
  are now calculated from an arbitrary projection matrix (unless they were
  provided);
- fixed Example09: the post-process shader doesn't need the aspect ratio, since
  the frame buffer has the same dimensions as the screen;
- changed the Vertex order in xr::Quad, to make it easier to render a quad as a
  triangle strip as well. NOTE: uses relying on xr::Quad::kIndices must swap the
  second and third vertex (NE and SW);
- xr::GameLoop is no longer performing Input::Update(), to make it more generic;
- xr::GameLoop is now an XR_NONOBJECT;
- added a template for project creation (and refactored xr3's premake to share
  bits of it);
  
v1.6.0
- deprecation of enum values from Primitive and BoxText is now enforced;
- fixed the handling of mipmaps in that they're only generated when requested;
- added mipmap filtering modes to Gfx, and a Gfx::F_TEXTURE_MIPMAP_NEAREST to
  disable trilinear filtering (which is default for mipmaps);
- replaced the use of Texture's user flags for controlling options at creation,
  with support for parsing options from the file name;
- added support for a .tex format to define xr::Textures;
- added support for cubemaps to xr::Texture, and an example for demonstration;
- added a new xr::Animator class to replace xr::Tweener and its auxilaries as a
  more generic and robust facility for value animation;
- enabled multi-processor compilation for VS builds on Windows;

v1.5.2
- fixed xr::TypeId<>() on (MSVC) Release builds;
- fixed xr::Gfx::CreateTexture() - no longer generating mipmaps when not 
  requested;
- removed usages of deprecated xr::Primitive values;

v1.5.1
- fixed the handling of window size in xr::Device::Init(): it stores the size of
  the window that we get from SDL2, rather than the size that was requested.
  This fixes touch handling in full screen mode;
- fixed null pointer dereference in xr::Entity::UpdateWorldTransform();
- fixed projection calculation in xr::ViewRayCaster::GetViewRay();
- fixed xr::Bezier()'s return type, stripping cv-qualifiers and references;
- modified XR_ASSET_DECL() to generate a Create() method returning a pointer
  to the concrete type, and modified XR_ASSET_DEF() to wrap it with a function
  for the creation of the related AssetReflector;
- moved BezierImpl to the xr::details namespace;
- added an aspect ratio member to xr::ViewRayCaster and an overload of
  GetViewRay() that accepts it from client code; deprecated the one only relying
  on Gfx as both incorrect and overly restrictive;
- added an overload of xr::Bezier() with less verbose usage for entire, static
  arrays;
- added methods for component-wise setting of xr::Entity's local translation and
  scale;
- added xr::Ray::GetPoint() and GetEnd();

v1.5.0
- xr::Font fixes:
  * fixed the number of glyphs written to the built asset, excluding the ones
    that were requested, but aren't available in the font;
  * fixed memory corruption caused by incorrect sizing of intermediate glyph
    bitmap buffers;
  * fixed the logging of an error message when failing to write glyph bitmap
    data;
- fixed asserts in BoxText::Generate() - reaching the end of the vertex buffer
  is only an error if there's more glyphs to write;
- ENABLE_GLYPH_DEBUG no longer writes individual .tgas, rather than dumping
  glyph data to stdout, for both the bitmap and SDF;
- SDF generation is now optional to allow better quality where text is not put
  through scaling / rotation and sharp corners are desired;
- added xr::Font::GetGlyphBitmapData();
- minor const correctness improvement in AssetPackBuilder;
- updated Example 03 to demonstrate a use of xr::Sprites;

v1.4.1
- Made xr::BoxText::Generate() and CreateMesh() const methods;

v1.4.0
- fixed multiple bugs around new lines, discarding whitespace and calculating
  line width, in xr::BoxText::Measure();
- fixed xr::BoxText::Generate() - removed first glyph xBearing from the cursor
  calculation as already accounted for in the Measurement;
- fixed xr::BoxText::CreateMesh() - empty measurements are safely ignored;
- fixed LogMemory() bugs:
  * removed out of bounds access;
  * all 16 bytes of the 'row' are printed in a human readable form;
- fixed AssetTests to no longer run in Release;
- improved xr::BoxText's usability:
  * improved the handling of Windows-style line breaks (CR/LF);
  * default box width is the maximum value float can represent;
  * added EnsureVerticalFit() to grow the box (if smaller) to
    n lines with given font and scale;
  * added Get/SetOrigin() to facilitate positioning the text;
  * added Get/SetHorizontal/VerticalSpacing();
  * added overloads to Measure() / CreateMesh() that take the
    number of bytes [of text] to be processed;
- added VS debug visualisers for the most commonly used types;
- updated premake to 5.0.0-alpha13 on all platforms;

v1.3.0
- fixed xr::AssetPack's handling of dependencies and aliases:
  * fixed the management of AssetPack contents - when UnmanagedFlag was set, it
    is only the AssetPack itself that isn't managed;
  * fixed redundant building and writing of contents that are also dependencies
    of other content;
  * dependencies not defined in the pack but having a dependency on content,
    are now being built into the pack;
  * the availability of internal dependencies is now ensured;
  * multiply defined assets (of the same path) are ignored with a warning;
  * multiply defined aliases override previous definitions with a warning;
- xr::CallbackBase<>::Call() is now a const method;
- deprecated xr::AssetPack::Get() in favour of the new GetAssetPtr();
- xr::Asset::Manager::Manage() only acquires the lock if the asset was valid in
  the first place;
- added xr::AssetPack::GetAsset<>();
- added xr::GameLoop;
- added xr::ReverseAdaptor<>;

v1.2.0
- fixed xr::Entity::FindComponent<>();
- fixed xr::Entity::AddComponent<>() - owner is correctly assigned;
- fixed xr::Entity::Clone() - cloning an Entity as a child to itself no longer
  causes infinite recursion, and the owner of cloned Components is now correctly
  assigned;
- fixed xr::StateManager::Pop/Change(), where the current state is now Exit()ed
  first and only Shutdown() once;
- fixed inconsistencies in the uses of int types in the Gfx API;
- added multi-threaded Gfx implementation;
- added support for PointList Primitives in Gfx;

v1.1.2
- fixed a broken include in Singleton.hpp;
- deprecated the option to transfer ownership of a texture via
  GFx::CreateFrameBuffer();
- improved error logging from ShaderComponent and Shader;
- added Singleton::Instance() and deprecated GetInst();
- added C++14-standard deprecation markers to previously deprecated APIs;
- changed InputImpl to a Singleton;

v1.1.1
- GCC v5.4 compilation errors fixed; 

v1.1

- fixed macOS build configuration and Clang compilation / link errors;
- fixed GLSL syntax that would not fly on macOS;
- fixed Entity/Component implementation (and AddComponent());
- added xr::FixedStreamBuf to xr3core;
- added xr::Config to replace Device::GetConfig{|Int}() and changed
  implementation to use environment variables;
- added Linux (64-bits) as a supported platform;

v1.0

- Initial release.
